{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux';\nconst initialState = {\n  user: {},\n  post: {}\n}; //(이전상태, 액션)=> 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/정아연/Documents/GitHub/SoundPicker-FrontStudy/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,MAAMC,YAAY,GAAC;AACfH,EAAAA,IAAI,EAAC,EADU;AAIfC,EAAAA,IAAI,EAAC;AAJU,CAAnB,C,CAWA;;AAEA,MAAMG,WAAW,GAAEF,eAAe,CAAC;AAC/BG,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAmB;AAC1B,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBH,MAAtB;AACA,+CACOD,KADP,GACgBC,MAAM,CAACI,OADvB;;AAIJ;AACI,eAAOL,KAAP;AARR;AAUC,GAZ8B;AAanCN,EAAAA,IAbmC;AAcnCC,EAAAA;AAdmC,CAAD,CAAlC;AAiBA,eAAeG,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper'\r\nimport user from './user'\r\nimport post from './post'\r\nimport { combineReducers } from 'redux';\r\nconst initialState={\r\n    user:{\r\n\r\n    },\r\n    post:{\r\n\r\n    },\r\n};\r\n\r\n\r\n\r\n//(이전상태, 액션)=> 다음상태\r\n\r\nconst rootReducer =combineReducers({\r\n    index: (state={},action)=>{\r\n    switch(action.type){\r\n        case HYDRATE:\r\n            console.log('HYDRATE',action)\r\n            return{\r\n                ...state,...action.payload,\r\n            }\r\n      \r\n        default:\r\n            return state;\r\n    }\r\n    },\r\nuser,\r\npost,\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}